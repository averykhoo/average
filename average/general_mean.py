import math


def general_mean(*xs, dim=1):
    """
    https://en.wikipedia.org/wiki/Generalized_mean

    special cases:
    dim=-inf -> minimum
    dim=-1   -> harmonic mean
             -- geometric-harmonic mean would fit in here
    dim=0    -> geometric mean
             -- logarithmic mean would fit in here
             -- arithmetic-geometric mean would fit in here
    dim=1    -> arithmetic mean
    dim=2    -> root mean square (quadratic mean)
    dim=3    -> cubic mean
             -- contra-harmonic mean would fit in here
    dim=inf  -> maximum
    """
    if dim == -math.inf:
        return min(xs)
    if dim == -1:
        return harmonic_mean(xs)
    if dim == 0:
        return geometric_mean(xs)
    if dim == 1:
        return arithmetic_mean(xs)
    # copilot suggested these lines
    # if dim == 2:
    #     return quadratic_mean(xs)
    # if dim == 3:
    #     return cubic_mean(xs)
    if dim == math.inf:
        return max(xs)
    if dim == math.inf:
        return max(xs)

    # # copilot suggested this line lol
    # raise ValueError("dim must be -inf, -1, 0, 1, 2, 3, or inf")

    return (sum(x ** dim for x in xs) / len(xs)) ** (1 / dim)


def harmonic_mean(xs):
    return len(xs) / sum(1 / x for x in xs)


if hasattr(math, 'prod'):
    def geometric_mean(*xs):
        return math.prod(xs) ** (1 / len(xs))  # `math.prod` is only available in Python 3.8 and above
else:
    def geometric_mean(*xs):
        return math.exp(sum(map(math.log, xs))) ** (1 / len(xs))


# the following functions were generated by github copilot, and i haven't checked it for correctness

def arithmetic_mean(xs):
    return sum(xs) / len(xs)


def quadratic_mean(xs):
    return sum(x ** 2 for x in xs) ** (1 / len(xs))


def cubic_mean(xs):
    return sum(x ** 3 for x in xs) ** (1 / len(xs))


def contra_harmonic_mean(xs):
    return len(xs) / sum(1 / x ** 2 for x in xs)


def maximum(*xs):
    return max(xs)


def minimum(*xs):
    return min(xs)


def median(*xs):
    return sorted(xs)[len(xs) // 2]


def mode(*xs):
    return max(xs, key=xs.count)


def range(*xs):
    return max(*xs) - min(*xs)


def midrange(*xs):
    return (max(*xs) + min(*xs)) / 2


def midrange_absolute(*xs):
    return (max(abs(x) for x in xs) + min(abs(x) for x in xs)) / 2


def midrange_squared(*xs):
    return (max(x ** 2 for x in xs) + min(x ** 2 for x in xs)) / 2


def midrange_cubed(*xs):
    return (max(x ** 3 for x in xs) + min(x ** 3 for x in xs)) / 2


def midrange_fourth(*xs):
    return (max(x ** 4 for x in xs) + min(x ** 4 for x in xs)) / 2


def midrange_fifth(*xs):
    return (max(x ** 5 for x in xs) + min(x ** 5 for x in xs)) / 2


def midrange_sixth(*xs):
    return (max(x ** 6 for x in xs) + min(x ** 6 for x in xs)) / 2


def midrange_seventh(*xs):
    return (max(x ** 7 for x in xs) + min(x ** 7 for x in xs)) / 2


def midrange_log(*xs):
    return (max(math.log(x) for x in xs) + min(math.log(x) for x in xs)) / 2


def midrange_log2(*xs):
    return (max(math.log2(x) for x in xs) + min(math.log2(x) for x in xs)) / 2


def midrange_log10(*xs):
    return (max(math.log10(x) for x in xs) + min(math.log10(x) for x in xs)) / 2


def midrange_log10(*xs):
    return (max(math.log10(x) for x in xs) + min(math.log10(x) for x in xs)) / 2


def midrange_log10(*xs):
    return (max(math.log10(x) for x in xs) + min(math.log10(x) for x in xs)) / 2


def midrange_log10(*xs):
    return (max(math.log10(x) for x in xs) + min(math.log10(x) for x in xs)) / 2
